#!/usr/bin/env bash


ROOT="$(pwd)"
CONFIG=$ROOT/.config.json
RESULT=$ROOT/result

function app()
{
   local action=$1
   shift
   case "$action" in
     "prepare") prepare $*;;
     "check") check $*;;
     "judge") judge $*;;
     "compile_prepare") compile_prepare $*;;
     "build_tool") build_tool $*;;
     "script") exec_script;;
     "install_tool") install_tool $*;;
     "test_tool") test_tool $*;;
     *) echo not found action! $action; exit 1;;
   esac
}

function exec_script()
{
   if [ $COMPILE_FLAG -eq 1 ]; then
      local sc=$COMPILE_SCRIPT
      local re=$COMPILE_RESULT
      mkdir -p $re
      if [ -e $sc ]; then
         $sc
	 echo "RESULT: $re"
	 echo ""
         tree -a -L 3 -h $re
      else
	 echo "not found script! $sc"
	 exit 1
      fi
   fi
}

function test_tool()
{
   local flag=$1
   shift
   case "$flag" in
     "ct-ng")
         # which ct-ng && ct-ng list-samples
	 echo "CTNG_HOME: $CTNG_HOME" 
     ;;
   esac
}

function install_ndk()
{
     echo "install ndk..."
     local flag=0
     local ver="android-ndk-r21-linux-x86_64"
     if [ "$NDK_VERSION" != "" ]; then
	ver="$NDK_VERSION"
     fi
     local url="https://dl.google.com/android/repository/${ver}.zip"
     local tmp=$(mktemp --suffix=.zip -u)
     echo "fetch ${url}..." && wget -qO "$tmp" "$url"
     if [ -e $tmp ]; then
        local opt=$TOOL_HOME/opt
        mkdir -p $opt && unzip -q $tmp -d $opt && rm -rf $tmp
        if [ $? -eq 0 ]; then
           local ndk=$(find $opt -type d -depth -maxdepth 1 -mindepth 1 -print)
	   if [ "$ndk" != "" ]; then
	      ln -sf "$ndk" "$TOOL_HOME/ndk"
              add_github_path "$ndk"
	      set_github_env "ANDROID_NDK_HOME" "$ndk"
              tree -ah -L 3 $TOOL_HOME
	      flag=1
	      echo "ndk oK!"
	   else
	      echo "find ndk failed!"
           fi
	 else
	   echo "unzip ndk failed!"
         fi
     else
	echo download ndk $ver failed!
     fi
     return $flag
}

function install_tool()
{
   local flag=$1
   shift
   case "$flag" in
     "ndk")
	install_ndk
	if [ $? -eq 0 ]; then exit 1; fi
     ;;
     "tool")
	if [ $TOOL_FLAG -eq 0 ]; then
	  if [ -e "$TOOL_BUILD" ] ; then
	     cd $TOOL_BUILD
	     echo $(pwd)
	     ls -a -l -h
	     echo $CTNG_HOME
	     ls -a -l -h $CTNG_HOME
	     echo ""
	     tree -a -L 3 -h
             if [ "$TOOL_CONFIG" == ":key" ]; then
                local path="$HOME/x-tools/$TOOL_KEY"
		if [ -e $path ]; then
		   mv $path $TOOL_HOME
                fi
	     fi 
	     if [ ! -e $TOOL_HOME ]; then
                mkdir -p $TOOL_HOME
	     fi
	     echo ""
	     sudo cp .config $TOOL_HOME/build.config
	     tree -a -L 3 -h $TOOL_HOME
	     echo ""
	     echo "$TOOL_HOME/build.config"
	     cat $TOOL_HOME/build.config
	  else
	     echo "TOOL_BUILD not exist! $TOOL_BUILD"
	     exit 1
	  fi
	else
	  echo "cross tool oK!" 
	fi
     ;;
     "ct-ng")
	if [ $CTNG_OK -eq 0 ]; then
	  if [ -e "$CTNG_BUILD" ] ; then
	     cd $CTNG_BUILD
             make install -j 4
             add_github_path "$CTNG_HOME/bin"
	  else
	     echo "CTNG_BUILD not exist! $CTNG_BUILD"
	     exit 1
	  fi
        else
	  echo "crosstool-ng oK!" 
	fi
     ;;
   esac
}

function build_tool()
{
   local flag=$1
   shift
   case "$flag" in
     "tool")
	if [ $TOOL_FLAG -eq 0 ]; then
	   echo "TOOL_KEY: $TOOL_KEY"
	   mkdir build 
           if [ "$TOOL_CONFIG" == ":key" ]; then
	      cd build
              ct-ng $TOOL_KEY
	   else
	      if [ -e $TOOL_CONFIG ]; then
		 cp -f $TOOL_CONFIG build/.config
		 cd build
	      else
		 echo "not found config: $TOOL_CONFIG"
		 exit 1
	      fi
	   fi
	   ct-ng build.4
	   set_github_env "TOOL_BUILD" "$(pwd)"
	else
	  echo "cross tool oK!" 
	fi
     ;;
     "ct-ng")
	if [ $CTNG_OK -eq 0 ]; then
	  if [ -e "$CTNG_REPO" ] ; then
             cd $CTNG_REPO
	     if [ "$CTNG_SRC" == "clone" ]; then
               ./bootstrap && ./configure --prefix=$CTNG_HOME $CTNG_FLAGS
	     else
               ./configure --prefix=$CTNG_HOME $CTNG_FLAGS
	     fi
	     if [ $? -eq 0 ]; then
                make -j 4
	        set_github_env "CTNG_BUILD" "$(pwd)"
	     else
	        echo "configure failed!"
		./configure --help
		exit 1
	     fi
	  else
	     echo "CTNG_REPO not exist!"
	     exit 1
	  fi
        else
	  echo "crosstool-ng oK!" 
	fi
     ;;
   esac
}

function compile_prepare()
{
   local flag=$1
   shift
   case "$flag" in
     "compile")
	echo skip!
     ;;
     "tool")
	if [ $TOOL_FLAG -eq 0 ]; then
           which ct-ng
	   if [ $? -eq 0 ]; then
              echo "prepare for tool..."
	   else
	      echo "ct-ng not exist!"
	      exit 1
	   fi
	else
	  echo "cross tool oK!" 
	fi
     ;;
     "ct-ng")
	if [ $CTNG_OK -eq 0 ]; then
	  if [ "$CTNG_REPO" != "" ] ; then
             sudo apt install gperf bison flex texinfo gawk libtool libtool-bin libncurses5-dev help2man -y
	  else
	    echo "CTNG_REPO empty!"
	    exit 1
          fi
	else
	  echo "crosstool-ng oK!" 
	fi
     ;;
   esac
}

function judge()
{
   local flag=$1
   shift
   case "$flag" in
     "ct-ng")
	if [ $CTNG_OK -eq 0 ]; then
	   local r="$(pwd)/build/ct_ng"
	   if [ "$CTNG_SRC" == "clone" ]; then
              git clone $CTNG_URL $r -j 4
	   elif [ "$CTNG_SRC" == "release" ]; then
              echo "TODO: download crosstool-ng..."
	   fi
           set_github_env "CTNG_REPO" "$r"
	else
	   echo "crosstool-ng Ok!"
        fi
     ;;
   esac
}

function check()
{
   local flag=$1
   shift
   case "$flag" in
     "tool_key")
	local flag=0
        if [ -e $TOOL_HOME ]; then
	     flag=1
	else
	   case "$TOOL_KEY" in
	      "NDK"|"self-ndk") flag=-1 ;;
	   esac
	fi
        set_github_env "KEY_FLAG" "$flag"
     ;;
     "compile")
	local flag=0
        if [ -e $TOOL_HOME ]; then
	     case $TOOL_KEY in
	        "NDK"|"self-ndk")
                     local ndk=$TOOL_HOME/ndk
                     add_github_path "$ndk"
	             set_github_env "ANDROID_NDK_HOME" "$ndk"
		;;
         	*)
		     add_github_path "$TOOL_HOME/bin"
		;;
   	     esac
	     flag=1
	else
	     case $TOOL_KEY in
	        "NDK"|"self-ndk")
                     install_ndk
	             if [ $? -eq 0 ]; then exit 1; fi
		 ;;
	         *)
	             local path="$(pwd)/cross-tool"
    	             if [ -e $path ]; then
	                mv $path $TOOL_HOME
                        add_github_path "$TOOL_HOME/bin"
	                flag=1
          	     else
         	        echo "not found cross tool!"
	                exit 1
    	             fi
	          ;;
            esac
	fi
        set_github_env "COMPILE_FLAG" "$flag"
     ;;
     "tool")
	local flag=0
        if [ -e $TOOL_HOME ]; then
             add_github_path "$TOOL_HOME/bin"
	     flag=1
	else
	  if [ -e $CTNG_HOME ]; then
             add_github_path "$CTNG_HOME/bin"
	  else
	    local path="$(pwd)/ct-ng"
	    if [ -e $path ]; then
	       mv $path $CTNG_HOME
               add_github_path "$CTNG_HOME/bin"
	    else
	       echo "not found tool and ct-ng!"
	       exit 1
	    fi
	  fi
	fi
        set_github_env "TOOL_FLAG" "$flag"
     ;;
     "ct-ng") 
	    local is_ok=0
            echo "CACHE_HIT: $CACHE_HIT"
	    if [ "$CACHE_HIT" == "true" ]; then
               export PATH=$PATH:$CTNG_HOME/bin
               which ct-ng > /dev/null 2>&1
               if [ $? -eq 0 ]; then
		  is_ok=1
                  add_github_path "$CTNG_HOME/bin"
	       else
                  echo "ct-ng not exist!"
	       fi
	    else
               echo "ct-ng cache miss!"
	    fi
            set_github_env "CTNG_OK" "$is_ok"
     ;;
   esac
}

function prepare()
{
   local flag=$1
   shift
   add_github_path "$ROOT/tool/bin"
   case "$flag" in
     "ct-ng") 
	 local key=$(jq .ctng.key $CONFIG -r)
	 local src=$(jq .ctng.src $CONFIG -r)
	 local url=$(jq .ctng.url $CONFIG -r)
	 local isu=$(jq .ctng.is_upload $CONFIG -r)
	 local flags=$(jq .ctng.flags $CONFIG -r)
	 set_github_env "CTNG_HOME" "$HOME/.crosstool-ng"
	 set_github_env "CTNG_CACHE_KEY" "crosstool-ng-$key"
	 set_github_env "CTNG_SRC"  "$src"
	 set_github_env "CTNG_URL"  "$url"
	 set_github_env "IS_UPLOAD" "$isu"
	 set_github_env "CTNG_FLAGS" "$flags"
     ;;
     "tool") 
	 local ctng_key=$(jq .ctng.key $CONFIG -r)
	 local tool_key=$(jq .tool.key $CONFIG -r)
	 local tool_config=$(jq .tool.config $CONFIG -r)
	 local isu=$(jq .tool.is_upload $CONFIG -r)
	 local api=$(jq .tool.api $CONFIG -r)
	 local arch=$(jq .tool.arch $CONFIG -r)
	 local ver=$(jq .tool.ndk_version $CONFIG -r)
	 set_github_env "TOOL_HOME" "$HOME/.crosstool"
	 set_github_env "TOOL_CACHE_KEY" "tool-$tool_key"
	 set_github_env "TOOL_KEY" "$tool_key"
	 set_github_env "TOOL_CONFIG" "$tool_config"
	 set_github_env "IS_UPLOAD" "$isu"
	 set_github_env "TOOL_API" "$api"
	 set_github_env "TOOL_ARCH" "$arch"
	 set_github_env "NDK_VERSION" "$ver"

	 set_github_env "CTNG_HOME" "$HOME/.crosstool-ng"
	 set_github_env "CTNG_CACHE_KEY" "crosstool-ng-$ctng_key"
     ;;
     "compile")
	 local tool_key=$(jq .tool.key $CONFIG -r)
	 local script=$(jq .compile.script $CONFIG -r)
	 local result=$RESULT
	 local isu=$(jq .compile.is_upload $CONFIG -r)
	 set_github_env "TOOL_HOME" "$HOME/.crosstool"
	 set_github_env "TOOL_CACHE_KEY" "tool-$tool_key"
	 set_github_env "TOOL_KEY" "$tool_key"

	 set_github_env "COMPILE_SCRIPT" "$script"
	 set_github_env "COMPILE_RESULT" "$result"
	 set_github_env "IS_UPLOAD" "$isu"
     ;;
   esac
}

function set_github_env()
{
  if [ $# -eq 2 ]; then
     echo "::set-env name=$1::$2"
  fi
}

function add_github_path()
{
  if [ $# -eq 1 ]; then
     echo "::add-path::$1"
  fi
}

app $*
